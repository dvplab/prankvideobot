import { Bot } from 'grammy';
import axios from 'axios';
import { config } from '../config/config.js';

import Chat from '../models/chat.js';

// –ú–µ—Å—Ç–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = {};

const bot = new Bot(config.token);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chatId
export async function saveChatId(userId, chatId) {
    try {
        let user = await Chat.findOne({ userId });

        if (user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º chatId, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user.chatId = chatId;
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
            user = new Chat({ userId, chatId });
        }

        await user.save();
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω chatId –¥–ª—è userId ${userId}: ${chatId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chatId:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
export async function isSubscribed(userId) {
    try {
        const response = await axios.get(
            `https://api.telegram.org/bot${config.token}/getChatMember`,
            {
                params: {
                    chat_id: config.channelId,
                    user_id: userId,
                },
            }
        );
        const memberStatus = response.data.result.status;
        return (
            memberStatus === 'member' ||
            memberStatus === 'administrator' ||
            memberStatus === 'creator'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/start"
bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId
    saveChatId(userId, chatId);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribed = await isSubscribed(userId);

    if (subscribed) {
        const link = `${config.domain}/goodtest?userId=${userId}`;
        await ctx.reply(
            `üîó –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø—Ä–∞–Ω–∫–∞–Ω—É—Ç—å –∏—Ö.\n<a href="${link}">${link}</a>`,
            { parse_mode: 'HTML' }
        );
    } else {
        await ctx.reply(
            `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ${config.channelId}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Å—ã–ª–∫–µ.`
        );
    }
});

export default bot;
